var pool = require('../mysql/mysql2_pool');
//查询数据库(测试是否链接上数据库)
pool.query('SELECT 1', (error, results) => {
  //异常处理
  if (error) {
    console.error(error);
    return;
  }
  console.log('数据库链接成功！！！ 下面开启server服务');

  var app = require('../app');//引入服务器对象
  var debug = require('debug')('a18-express-mysql2:server');//调试对象
  var http = require('http');//引入入http模块

  //函数首先检查环境变量PORT是否已定义，如果已定义则使用该值，否则使用默认值'3000'。然后将计算出的值赋给变量port，并将port设置为Express应用的端口号。
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

 //该函数使用http模块创建一个服务器，并将app作为参数传递给服务器。
  var server = http.createServer(app);

//监听端口
server.listen(port,()=>{
  console.log(`服务器启动成功...` , `http://127.0.0.1:${port}`);
});

//
  server.on('error', onError);//当发生"error"事件时，会调用"onError"函数
  server.on('listening', onListening);//当发生"listening"事件时，会调用"onListening"函数。

 
//函数用于将给定的端口值进行规范化。首先，将给定的值转换为整数。如果转换结果是NaN，说明给定的值是一个命名管道，直接返回该值。如果转换结果大于等于0，说明是一个有效的端口号，返回该端口号。否则，返回false表示端口号无效。
  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

//错误处理函数，用于处理监听端口时出现的错误。如果错误不是由于系统调用"listen"引起的，将抛出错误。如果错误是由于"listen"引起的，根据错误类型进行处理并输出相应的错误消息，最后退出进程。
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

 //当服务器开始监听连接时被调用。它获取服务器的地址信息并根据地址类型显示是通过管道还是端口进行连接。然后，使用debug函数在控制台输出监听的信息
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


});




